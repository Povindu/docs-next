---
import { render, type CollectionEntry } from "astro:content";
import type { MarkdownHeading } from "astro";
import { getSegmentToc } from "@utils/tocUtils";
import { getDocEntries, getHeadings } from "@utils/contentUtils";
import { getContentSlug } from "@utils/slugUtils";
import MarkdownLayout from "@layouts/Markdown.astro";

const language = "en" as const;
const segment = "database" as const;

// Computed tocData once at module load (build-time) and reuse it for all pages
const tocData = getSegmentToc(language, segment);

// Generate static paths from de collection
export async function getStaticPaths() {
  const language = "en" as const;
  const segment = "database" as const;

  const docEntries = await getDocEntries(language, segment);
  const headings = await getHeadings(docEntries);

  return docEntries.map((entry, index) => {
    const generatedSlug = getContentSlug(entry.filePath!, language, segment);

    return {
      params: { slug: `${generatedSlug}` },
      props: { entry, headings: headings[index] },
    };
  });
}

type Props = {
  entry: CollectionEntry<typeof language>;
  headings: MarkdownHeading[];
};

const { entry, headings } = Astro.props;

const { Content } = await render(entry);
---

<MarkdownLayout
  frontmatter={entry.data}
  collection={entry.collection}
  slug={entry.id}
  headings={headings}
  TableOfContentData={tocData}
  isLearn="false"
  lang={language}
>
  {Content ? <Content /> : "Loading content..."}
</MarkdownLayout>
