---
import { getCollection } from "astro:content";
import MarkdownLayout from "@layouts/Markdown.astro";
import WebApiNamespace from "@components/WebApiNamespace.astro";
import WebApiClass from "@components/WebApiClass.astro";
import type {
  headingsListProps,
  namespaceClassifiedDataProps,
} from "~/types/WebApiLayoutTypes";
import { getEntry } from "astro:content";
import type { Item } from "~/types/WebAPITypes";
import { getTableOfContentsFromCollection } from "~/utils/getTableOfContentsFromCollection";
import { stripMarkdownSlug } from "~/utils/slugUtils";

const language = "en";
const collectionPath = `superoffice-docs/docs/${language}/api/reference/webapi`;
const allTocEntries = await getCollection("tocExternal");
const tocEntries = allTocEntries.filter((entry) =>
  entry.id.startsWith(collectionPath),
);
const tocData = await getTableOfContentsFromCollection(
  tocEntries,
  collectionPath,
);

// Generates static paths from webapi collection
export async function getStaticPaths() {
  const YMLEntries = await getCollection("webapi");
  return YMLEntries.map((entry) => {

    //Remove .md extension AND filepath prefix (ex:superoffice-docs/docs/en/api/reference/webapi) from filepath
    const generatedSlug = stripMarkdownSlug(entry.filePath!, `superoffice-docs/docs/en/api/reference/webapi`, true);
    // const generatedSlug = entry.filePath
    //   ?.replace(
    //     "external-content/superoffice-docs/docs/en/api/reference/webapi",
    //     "",
    //   )
    //   .replace(".yml", "");
    return {
      params: { slug: `${generatedSlug}` },
      props: { entry },
    };
  });
}

const { entry} = Astro.props;
const pagetitle = entry.data.items[0].type + " " + entry.data.items[0].id;

// Use to get the plural forms of the name
export const conversionList = {
  Class: "Classes",
  Constructor: "Constructors",
  Field: "Fields",
  Method: "Methods",
  Property: "Properties",
  Interface: "Interfaces",
  Implement: "Implements",
  Enum: "Enums",
};

// Genereting heading from yml data
const headingList: headingsListProps = {};
const namespaceData: namespaceClassifiedDataProps = {};

const documentType = entry.data.items[0].type;
if (documentType == "Namespace") {
  const promises = entry.data.items[0].children?.map(
    async (childName: string) => {
      const formattedItem = childName.replaceAll(".", "").toLowerCase();
      const childrenItemEntry = await getEntry("webapi", formattedItem);
      if (childrenItemEntry) {
        const dataItem = childrenItemEntry?.data.items[0];
        const key = dataItem.type as keyof namespaceClassifiedDataProps;
        if (!namespaceData[key]) {
          namespaceData[key] = [];
        }
        namespaceData[key].push({
          uid: dataItem.uid,
          id: dataItem.id,
          summary: dataItem.summary,
        });
        appendIntoHeadingList(key, dataItem);
      }
    },
  );

  await Promise.all(promises || []);
} else if (["Class", "Interface", "Enum"].includes(documentType)) {
  // Append headings of every other item except parent item to headingsList
  const otherItemsExceptParentItem = entry.data.items.slice(1);
  otherItemsExceptParentItem.forEach((dataItem: Item) => {
    const key = dataItem.type as keyof headingsListProps;
    appendIntoHeadingList(key, dataItem);
  });

  // Check if implements exist and add them to headingList
  if (
    entry.data.items[0].implements &&
    entry.data.items[0].implements.length > 0
  ) {
    const key = "Implement" as keyof headingsListProps;
    entry.data.items[0].implements.forEach((item: string) => {
      if (!(key in headingList)) {
        headingList[key] = [];
      }
      headingList[key].push({
        text: item,
        slug: item,
      });
    });
  }
}

// Generate heading based on collected headings in headingList
const headings = [{ depth: 0, slug: "", text: "" }];
let ItemType: keyof headingsListProps;
for (ItemType in headingList) {
  if (headingList[ItemType].length > 0) {
    headings.push({
      depth: 2,
      slug: conversionList[ItemType as keyof typeof conversionList],
      text: conversionList[ItemType as keyof typeof conversionList],
    });
    headingList[ItemType].map((item) => {
      headings.push({ depth: 3, slug: `${item.slug}`, text: item.text });
    });
  }
}

/**
 * Appends headings into headingList according to relevent key
 *
 * @param key - key of the heading to be included (ex: Class, Constructor, Enum)
 * @param dataItem - dataItem's extracted from the yml
 */
function appendIntoHeadingList(key: keyof headingsListProps, dataItem: Item) {
  if (!(key in headingList)) {
    headingList[key] = [];
  }
  headingList[key].push({
    text: dataItem.id,
    slug: dataItem.uid,
  });
}
---

<MarkdownLayout
  frontmatter={entry.data}
  collection={entry.collection}
  slug={entry.id}
  TableOfContentData={tocData}
  isLearn={false}
  isWebAPI={true}
  headings={headings}
  lang="en"
>
  <div class="w-full overflow-x-hidden [&&]:not-prose">
    <h1 class="text-3xl md:text-4xl break-words mt-6 mb-6">{pagetitle}</h1>

    {
      documentType == "Namespace" && (
        <WebApiNamespace namespaceData={namespaceData} />
      )
    }

    {
      ["Class", "Interface", "Enum"].includes(documentType) && (
        <WebApiClass data={entry.data} />
      )
    }
  </div>
</MarkdownLayout>
