---
import { getCollection, render } from "astro:content";
import MarkdownLayout from "@layouts/Markdown.astro";
import { getTableOfContents } from "~/utils/getTableOfContents";
import { stripFilePathAndExtension } from "~/utils/slugUtils";

//generating static paths from en collection
export async function getStaticPaths() {
  const docEntries = await getCollection("api-docs");

  const headings = await Promise.all(
    docEntries.map(async (post) => {
      const data = await render(post);
      return data.headings;
    }),
  );
  return docEntries.map((entry, index) => {
    //Remove .md extension AND filepath prefix (ex:superoffice-docs/docs/en/api) from filepath
    const generatedSlug = stripFilePathAndExtension(
      entry.filePath!,
      `superoffice-docs/docs/en/api`,
      true,
    );
    
    const category = generatedSlug?.split("/")[0];

    function getTocPath(): string{
      if (category == "reference") return `/${generatedSlug.substring(0, generatedSlug.lastIndexOf("/"))}`;
      return ""
    }

    const tocPath = getTocPath();
    const tocData = getTableOfContents(`docs/en/api${tocPath}`);

    return {
      params: { slug: `${generatedSlug}` },
      props: { entry, headings: headings[index], tocData },
    };
  });
}

const { entry, headings, tocData } = Astro.props;
const { Content } = await render(entry);

---

<MarkdownLayout
  frontmatter={entry.data}
  collection={"api-docs"}
  slug={entry.id}
  filePath={entry.filePath}
  headings={headings}
  TableOfContentData={tocData}
  isLearn={false}
  lang="en"
>
  {Content ? <Content /> : "Loading content..."}
</MarkdownLayout>