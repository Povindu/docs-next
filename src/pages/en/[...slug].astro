---
import { getCollection, render } from "astro:content";
import MarkdownLayout from "@layouts/Markdown.astro";
import { getTableOfContents } from "../../utils/getTableOfContents";
import { stripFilePathAndExtension } from "~/utils/slugUtils";

//generating static paths from en collection
export async function getStaticPaths() {
  const docEntries = (await getCollection("en", ({ data }) => {
    return !data.redirect_url;
  }));

  const headings = await Promise.all(
    docEntries.map(async (post) => {
      const data = await render(post);
      return data.headings;
    }),
  );
  return docEntries.map((entry, index) => {
    //Remove .md extension AND filepath prefix (ex:superoffice-docs/docs/en) from filepath
    const generatedSlug = stripFilePathAndExtension(
      entry.filePath!,
      `superoffice-docs/docs/en`,
      true,
    );
    
    const category = generatedSlug?.split("/")[0];
    const isLearn = entry.data.uid?.startsWith("help");

    function getTocPath(): string{
      if (isLearn) return "learn";
      return category;
    }

    const tocPath = getTocPath();
    const tocData = getTableOfContents(`docs/en/${tocPath}`);

    return {
      params: { slug: `${generatedSlug}` },
      props: { entry, headings: headings[index], tocData, isLearn },
    };
  });
}

const { entry, headings, tocData, isLearn } = Astro.props;

const { Content } = await render(entry);
---

<MarkdownLayout
  frontmatter={entry.data}
  collection={entry.collection}
  slug={entry.id}
  filePath={entry.filePath}
  headings={headings}
  TableOfContentData={tocData}
  isLearn={isLearn}
  lang="en"
>
  {Content ? <Content /> : "Loading content..."}
</MarkdownLayout>