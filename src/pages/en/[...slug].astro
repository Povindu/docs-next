---
import { getLocalizedToc, getSegmentToc } from "@utils/tocUtils";
import { getFilteredDocEntries } from "@utils/contentUtils";
import { getContentSlug } from "@utils/slugUtils";
import type { DocsFrontmatter } from "~/types/DocsTypes";
import MarkdownLayout from "@layouts/ContentLayout.astro";

const language = "en" as const;

// Generate static paths from EN collection including learn and excluding specific segments.
export async function getStaticPaths() {
  const language = "en" as const;
  const learnSegmentKey = "learn";
  const excluded = [""]; 

  // No redirects and not in excluded folders
  const docEntries = await getFilteredDocEntries(language, excluded);
  const tocCache = new Map<string, Awaited<ReturnType<typeof getSegmentToc>>>();
  tocCache.set(learnSegmentKey, await getLocalizedToc(language));

  return Promise.all(
    docEntries.map(async (entry) => {
      const slug = getContentSlug(entry.filePath!, language);

      const isLearn = ((entry.data as DocsFrontmatter).uid ?? "").startsWith("help-");
      const segment = isLearn ? learnSegmentKey : slug.split("/")[0];

      if (!tocCache.has(segment)) {
        tocCache.set(segment, await getSegmentToc(language, segment));
      }

      return {
        params: { slug },
        props: {
          entry,
          tocData: tocCache.get(segment)!,
          isLearn,
        },
      };
    }),
  );
}

const { entry, tocData, isLearn } = Astro.props;
---

<MarkdownLayout
  entry={entry}
  toc={tocData}
  language={language}
  isLearn={isLearn}
/>
