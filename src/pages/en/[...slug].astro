---
import { getCollection, render } from "astro:content";
import MarkdownLayout from "@layouts/Markdown.astro";
import { getTableOfContents } from "../../utils/getTableOfContents";

//generating static paths from en collection
export async function getStaticPaths() {
  const docEntries = await getCollection("en");

  const headings = await Promise.all(
    docEntries.map(async (post) => {
      const data = await render(post);
      return data.headings;
    })
  );
  return docEntries.map((entry, index) => {
    //removing .md extention AND "src/content/en" from filepath
    const generatedSlug = entry.filePath
      ?.replace("external-content/superoffice-docs/docs/en", "")
      .replace(".md", "");
    const category = generatedSlug?.split("/")[1];
    const isLearn = entry.data.uid?.startsWith("help");
    const isWebAPI = entry.data.uid?.startsWith("webapi");

    var TocPath;
    if (isLearn) {
      TocPath = "learn";
    } else if (isWebAPI) {
      TocPath = "api/reference/webapi";
    } else {
      TocPath = category;
    }

    const tocData = getTableOfContents(`docs/en/${TocPath}`);

    return {
      params: { slug: `${generatedSlug}` },
      props: { entry, headings: headings[index], tocData, isLearn, isWebAPI },
    };
  });
}

const { entry, headings, tocData, isLearn, isWebAPI } = Astro.props;

const { Content } = await render(entry);
---

<MarkdownLayout
  frontmatter={entry.data}
  collection={entry.collection}
  slug={entry.id}
  filePath={entry.filePath}
  headings={headings}
  TableOfContentData={tocData}
  isLearn={isLearn}
  isWebAPI={isWebAPI}
  lang="en"
>
  {Content ? <Content /> : "Loading content..."}
</MarkdownLayout>
