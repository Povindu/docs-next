---
import { getSegmentToc } from "@utils/tocUtils";
import { getFilteredDocEntries, getHeadings } from "@utils/contentUtils";
import { getContentSlug } from "@utils/slugUtils";
import MarkdownPage from "@components/MarkdownPage.astro";

const language = "en" as const;

// Generate static paths from EN collection excluding learn (implied) and specific segments.
export async function getStaticPaths() {
  const language = "en" as const;
  const excluded = ["automation", "database", "developer-portal", "mobile", "online", "onsite", "service", "ui"]; // api is its own collection

  // No redirects and not in excluded folders
  const docEntries = await getFilteredDocEntries(language, excluded);
  const headings = await getHeadings(docEntries);

  const tocCache = new Map<string, Awaited<ReturnType<typeof getSegmentToc>>>();

  return Promise.all(
    docEntries.map(async (entry, i) => {
      const slug = getContentSlug(entry.filePath!, language);
      const segment = slug.split("/")[0];

      if (!tocCache.has(segment)) {
        tocCache.set(segment, await getSegmentToc(language, segment));
      }

      return {
        params: { slug },
        props: {
          entry,
          headings: headings[i],
          tocData: tocCache.get(segment)!,
        },
      };
    })
  );
}

const { entry, headings, tocData } = Astro.props;
---

<MarkdownPage
  entry={entry}
  headings={headings}
  toc={tocData}
  language={language}
/>
