---
import { getTableOfContents } from "@utils/getTableOfContents";
import { getFilteredDocEntries, getHeadings } from "@utils/contentUtils";
import { getContentSlug } from "@utils/slugUtils";
import MarkdownPage from "@components/MarkdownPage.astro";

const language = "en" as const;

//generating static paths from en collection
export async function getStaticPaths() {
  const language = "en" as const;
  const excluded = ["database", "developer-portal", "mobile", "online", "onsite"]; // Exclude specific segments

  // No redirects and not in excluded folders
  const docEntries = await getFilteredDocEntries(language, excluded);
  const headings = await getHeadings(docEntries);

  return docEntries.map((entry, index) => {
    const generatedSlug = getContentSlug(entry.filePath!, language);

    const category = generatedSlug?.split("/")[0];
    const isLearn = entry.data.uid?.startsWith("help");

    function getTocPath(): string {
      if (isLearn) return "learn";
      return category;
    }

    const tocPath = getTocPath();
    const tocData = getTableOfContents(`docs/${language}/${tocPath}`);

    return {
      params: { slug: generatedSlug },
      props: { entry, headings: headings[index], tocData, isLearn },
    };
  });
}

const { entry, headings, tocData, isLearn } = Astro.props;
---

<MarkdownPage
  entry={entry}
  headings={headings}
  toc={tocData}
  language={language}
  isLearn={isLearn}
/>
