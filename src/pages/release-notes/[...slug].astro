---
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { MarkdownHeading } from "astro";
import MarkdownLayout from "@layouts/Markdown.astro";
import { stripFilePathAndExtension } from "~/utils/slugUtils";
import { getTableOfContentsFromCollection } from "~/utils/getTableOfContentsFromCollection";

const collectionFullName = `superoffice-docs/release-notes`;
const allTocEntries = await getCollection("toc");
const tocEntries = allTocEntries.filter((entry) =>
  entry.id.startsWith(collectionFullName)
);
const tocData = await getTableOfContentsFromCollection(tocEntries, collectionFullName);

// Generate static paths from release-notes collection
export async function getStaticPaths() {
  const collectionName = "release-notes";
  const docEntries = (await getCollection(collectionName, ({ data }) => {
    return !data.redirect_url;
  }));

  const headings = await Promise.all(
    docEntries.map(async (post) => {
      const data = await render(post);
      return data.headings;
    })
  );

  return docEntries.map((entry, index) => {

    //Remove .md extension AND filepath prefix (ex:superoffice-docs/release-notes) from filepath
    const generatedSlug = stripFilePathAndExtension(entry.filePath!, `superoffice-docs/${collectionName}`, true);

    return {
      params: { slug: `${generatedSlug}` },
      props: { entry, headings: headings[index] },
    };
  });
}

type Props = {
  entry: CollectionEntry<"release-notes">;
  headings: MarkdownHeading[];
};

const { entry, headings } = Astro.props;

const { Content } = await render(entry);
---

<MarkdownLayout
  frontmatter={entry.data}
  collection={entry.collection}
  slug={entry.id}
  headings={headings}
  TableOfContentData={tocData}
  lang="en"
>
  {Content ? <Content /> : "Loading content..."}
</MarkdownLayout>
