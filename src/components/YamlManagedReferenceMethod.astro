---
import type { YamlManagedReferenceItem } from "~/types/YamlManagedReferenceTypes";
import YamlCodeBlock from "@components/YamlCodeBlock.astro";
import YamlExampleBlock from "@components/YamlExampleBlock.astro";
import Link from "@components/Link.astro";
import { renderHtmlOrText } from "@utils/yamlManagedReferenceUtils";

interface Props {
    method: YamlManagedReferenceItem;
    api: string; // "crmscript", "webapi"
    baseUrl: string;
}

const { method, api, baseUrl } = Astro.props;
---

<div class="mb-6">
    <h3 id={method.uid} class="text-xl font-semibold">{method.name}</h3>
    {method.summary && <p class="mb-2" set:html={method.summary} />}

    {
        method.syntax?.content && (
            <>
                <h4 class="text-md font-semibold">Declaration</h4>
                <YamlCodeBlock code={method.syntax.content} api={api} />
            </>
        )
    }

    {
        method.syntax?.parameters && method.syntax.parameters.length > 0 && (
            <section class="mb-4">
                <h4 class="text-md font-semibold">Parameters</h4>
                <table class="table-auto border border-gray-300 w-full text-sm">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border border-gray-300 p-2 text-left">
                                Type
                            </th>
                            <th class="border border-gray-300 p-2 text-left">
                                Name
                            </th>
                            <th class="border border-gray-300 p-2 text-left">
                                Description
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        {method.syntax.parameters.map((param) => (
                            <tr>
                                <td class="border border-gray-300 p-2">
                                    <Link
                                        href={`${baseUrl}/${param.type}`}
                                        text={param.type ?? ""}
                                    />
                                </td>
                                <td class="border border-gray-300 p-2 italic">
                                    {param.id ?? ""}
                                </td>
                                <td class="border border-gray-300 p-2">
                                    {renderHtmlOrText(param.description)}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </section>
        )
    }

    {
        method.syntax?.return && (
            <section class="mb-4">
                <h4 class="text-md font-semibold">Returns</h4>
                <table class="table-auto border border-gray-300 w-full text-sm">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="border border-gray-300 p-2 text-left">
                                Type
                            </th>
                            <th class="border border-gray-300 p-2 text-left">
                                Description
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="border border-gray-300 p-2">
                                <Link
                                    href={`${baseUrl}/${method.syntax.return.type}`}
                                    text={method.syntax.return.type ?? ""}
                                />
                            </td>
                            <td class="border border-gray-300 p-2">
                                {renderHtmlOrText(method.syntax.return.description)}
                            </td>
                        </tr>
                    </tbody>
                </table>
            </section>
        )
    }

    {
        method.example && method.example.length > 0 && (
            <>
                <h4 class="text-md font-semibold">Examples</h4>
                {method.example.map((ex) => (
                    <YamlExampleBlock ex={ex} api={api} />
                ))}
            </>
        )
    }
</div>
