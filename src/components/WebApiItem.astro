---
import type { Item, Reference } from "../types/WebAPITypes";

export interface Props {
  item: Item;
  ref: Reference[];
}

const { item, ref } = Astro.props;

const getDataFromReference = (uid:string) : Reference => {
  return ref.filter((item) => {
    return item.uid == uid
  })[0]
}

var itemTypeKey;
switch(item.type){
    case "Property":
        itemTypeKey = "Property Value"
        break;
    case "Field":
        itemTypeKey = "Field Value"
        break;
    case "Method":
        itemTypeKey = "Returns"
        break;
}

---
<div>
    <p class="font-bold text-lg">{item.name}</p>
    <p>{item.summary}</p>
    
    {
        item.syntax && (
        <p class="text-sm font-semibold text-gray-400">Declaration</p>
        <p><pre>{item.syntax.content}</pre></p>
        )
    }
    
    {
        item.syntax?.parameters && item.syntax?.parameters.length > 0 && (
        <p class="text-sm font-semibold text-gray-400">Parameters</p>
        <table class="[&_td]:pl-2 text-black overflow-x-auto block">
            <tr class="font-bold border [&_*]:border [&_*]:border-gray-300 border-b-2 border-gray-300">
                <td class="">Type</td>
                <td class="">Name</td>
                <td class="">Description</td>
            </tr>
            {item.syntax?.parameters?.map( (row, index)=>{
                return <tr class={`[&_td]:border [&_td]:border-gray-300 ${index % 2 == 0 && "bg-stone-100"}`}>
                    <td class=""><a class="text-orange-600 no-underline hover:underline font-normal" href={row.type}>{getDataFromReference(row.type).name}</a></td>
                    <td class="italic">{row.id}</td>
                    <td>{row.description}</td>
                </tr>
            })}
        </table>
        )
    }
 
    {
        item.syntax?.return && (
        <p class="text-sm font-semibold text-gray-400">{itemTypeKey}</p>
        <table class="[&_td]:pl-2 text-black">
            <tr class="font-bold border [&_*]:border [&_*]:border-gray-300 border-b-2 border-gray-300">
                <td >Type</td>
                <td>Description</td>
            </tr>
            <tr class={`[&_td]:border [&_td]:border-gray-300 bg-stone-100 w-full`}>
                <td class="w-80">
                    <a class="break-all w-full text-orange-600 no-underline hover:underline font-normal" href={item.syntax.return.type}>{getDataFromReference(item.syntax.return.type).name}</a></td>
                <td class="w-80">{item.syntax?.return?.description}</td>
            </tr>
        </table>
        )
    }
</div>
