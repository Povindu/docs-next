---
import { Code } from 'astro:components';
import type { ManagedReferenceType, Reference } from "../types/WebAPITypes";
import type {indexDictionaryProps} from "../types/WebApiLayoutTypes"
import WebAPIItem from "@components/WebApiItem.astro"

type Props = {
    data: ManagedReferenceType;
};

const { data } = Astro.props;

const base = import.meta.env.BASE_URL;
const baseUrl = base + "/en/api/reference/webapi/"

const getDataFromReference = (uid:string) : Reference => {
  return data.references.filter((item) => {
    return item.uid == uid
  })[0]
}

const indexDictionary : indexDictionaryProps = {
  Class: [],
  Constructor: [],
  Field: [],
  Method : [],
  Property : [],
  Namespace: [],
}

data.items.forEach( (item , index) => {
  const key = item.type as keyof indexDictionaryProps;
  if (!indexDictionary[key]) {
    indexDictionary[key] = []; 
  }
  indexDictionary[key].push(index);
})


---

<div class="w-full">

    <p class="mt-0 pt-0" set:html = {data.items[0].summary}></p>

    {/* Inheritance */}
    {data.items[0].inheritance &&
      <div class="m-0">
        <h2 class="font-medium text-sm border-b-[1px] pb-1 border-gray-300">Inheritance</h2>
        <ul class="list-none text-orange-500 [&>*]:my-0 m-0 p-0">{data.items[0].inheritance.map( (inheritClass :string, index : number) => {
            return <li> ↳ {inheritClass.split(".").pop()} </li>
        })}</ul>
        <p class="ml-4 my-0">↳ {data.items[0].id}</p>
        <ul class="list-none ml-2 text-orange-500 [&>*]:my-0 my-0">{data.items[0].derivedClasses &&  data.items[0].derivedClasses.map( (inheritClass :string) => {
            return <li class=""> ↳ {inheritClass.split(".").pop()} </li>
        })}</ul>
      </div>
    }
        
    {/* Implements */}
    {
      data.items[0].implements && (
        <div class="">
          <h2 class="font-medium text-sm">Implements</h2>
          <p class="text-orange-500">{data.items[0].implements?.map( (implementItem :string) => {
          return implementItem.split(".").pop()})}
          </p>
        </div>
      )
    }

    <h2 class="text-xs"><span class="font-bold mr-1">Namespace:</span><a href={baseUrl+data.items[0].namespace} class="text-orange-600"> {data.items[0].namespace}</a></h2>
    <h2 class="text-xs"><span class="font-bold mr-1">Assembly:</span><span class="font-semibold">{data.items[0].assemblies}.dll</span></h2>

    { data.items[0].syntax && (
      <h2 class="font-medium text-sm">Syntax</h2>
      <div class="prose"><Code code={data.items[0].syntax?.content} lang={"csharp"} theme="houston"/></div>
    )}
    
    {/* Remarks */}
    {data.items[0].remarks && ( 
      <div class="w-full">
        <h2 class="font-bold text-sm">Remarks</h2>
        <pre class="text-base bg-white text-inherit font-sans w-full overflow-x-auto whitespace-pre-line">{data.items[0].remarks}</pre>
      </div>)}
    
    {/* Examples */}
    {data.items[0].example && ( <div>
        <h2 class="font-bold text-sm">Examples</h2>
        <p set:html = {data.items[0].example}></p>
      </div>)}
    

    {indexDictionary.Constructor.length > 0 && ( 
      <div>
        <h2 id="Constructors" class="text-2xl">Constructors</h2>
        <div>
          {indexDictionary.Constructor.map( (indexNo) => {
            return <WebAPIItem ref={data.references} item={data.items[indexNo]} />
          })}
        </div>
      </div>
     )}

    {indexDictionary.Field.length > 0 && (
      <div>
        <h2 id="Fields" class="text-2xl font-bold">Fields</h2>
        {indexDictionary.Field.map( (indexNo) => {
          return <WebAPIItem ref={data.references} item={data.items[indexNo]} />
        })}
      </div>
    )}
    
    {indexDictionary.Method.length > 0 && (
      <div>
        <h2 id="Methods" class="text-2xl font-bold">Methods</h2>
        {indexDictionary.Method.map( (indexNo) => {
          return <WebAPIItem ref={data.references} item={data.items[indexNo]} />
        })}
      </div>)}

    {indexDictionary.Property.length > 0 && ( 
      <h2 id="Properties" class="text-2xl">Properties</h2>
      <div>
        {indexDictionary.Property.map( (indexNo) => {
          return <WebAPIItem ref={data.references} item={data.items[indexNo]} />
        })}
      </div>
     )}

    
    
    {
      data.items[0].implements && data.items[0].implements.length > 0 &&
      <div>
        <h2 id="Implements" class="text-2xl">Implements</h2>
        <div class="">
          {
          data.items[0].implements?.map( (itemUid) => {
            return (
                  <a class="text-orange-600 no-underline hover:underline font-normal" 
                      href={itemUid}>{getDataFromReference(itemUid).name}
                  </a>
            )
                  
          })
        }
        </div>
      </div>
    }
</div>