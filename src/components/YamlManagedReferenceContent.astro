---
import type { CollectionEntry } from "astro:content";
import YamlManagedReferenceNamespace from "@components/YamlManagedReferenceNamespace.astro";
import YamlManagedReferenceEnum from "@components/YamlManagedReferenceEnum.astro";
import YamlManagedReferenceClass from "@components/YamlManagedReferenceClass.astro";
import YamlCodeBlock from "@components/YamlCodeBlock.astro";
import type {
    YamlManagedReferenceItem,
    YamlManagedReferenceReference,
} from "~/types/YamlManagedReferenceTypes";
import { buildNamespaceData } from "@utils/yamlManagedReferenceUtils";

// Props
interface Props {
    entry: CollectionEntry<"crmscript">;
    baseUrl: string;
}

const { entry, baseUrl } = Astro.props;
const data = entry.data;
const { items, references } = data;
const api = entry.collection; // "crmscript", "webapi"

const namespaceData = buildNamespaceData(
    items as YamlManagedReferenceItem[],
    (references ?? []) as YamlManagedReferenceReference[],
);

const documentType = items[0]?.type;

// Guard against empty items
const mainItem = data.items?.[0];
const hasItems = Boolean(mainItem);

// Basic fields
const { summary, remarks, example, syntax, id, type } = mainItem;
---

{
    !hasItems ? (
        <section class="prose max-w-none border border-red-300 p-4 bg-red-50">
            <h2 class="text-red-700 font-bold">Missing Data</h2>
            <p>
                No items were found in this ManagedReference file:{" "}
                <code>{entry.id}</code>
            </p>
        </section>
    ) : (
        <section class="prose max-w-none">
            <h1 class="text-3xl font-bold mb-2">
                {type} {id}
            </h1>

            {/* Namespace & Assembly (skip for CRMScript) */}

            {summary && <p set:html={summary} class="mb-6" />}

            {syntax?.content && (
                <section class="mb-6">
                    <h2 class="text-xl font-semibold">Syntax</h2>
                    <YamlCodeBlock
                        code={syntax.content}
                        api={entry.collection}
                    />
                </section>
            )}

            {remarks && (
                <section class="mb-6">
                    <h2 class="text-xl font-semibold">Remarks</h2>
                    <pre class="bg-gray-50 p-3 rounded">{remarks}</pre>
                </section>
            )}

            {example && example.length > 0 && (
                <section class="mb-6">
                    <h2 class="text-xl font-semibold">Examples</h2>
                    {example.map((ex) => (
                        <pre class="bg-gray-50 p-3 rounded" set:html={ex} />
                    ))}
                </section>
            )}

            {documentType === "Namespace" && (
                <YamlManagedReferenceNamespace
                    namespaceData={namespaceData}
                    baseUrl={baseUrl}
                />
            )}

            {documentType === "Class" && (
                <YamlManagedReferenceClass
                    items={items as YamlManagedReferenceItem[]}
                    api={api}
                    baseUrl={baseUrl}
                />
            )}

            {documentType === "Enum" && (
                <YamlManagedReferenceEnum
                    items={items as YamlManagedReferenceItem[]}
                />
            )}
        </section>
    )
}
